# _     _            _        _          _____
#| |__ | | __ _  ___| | _____| | ___   _|___ /
#| '_ \| |/ _` |/ __| |/ / __| |/ / | | | |_ \
#| |_) | | (_| | (__|   <\__ \   <| |_| |___) |
#|_.__/|_|\__,_|\___|_|\_\___/_|\_\\__, |____/
#                                  |___/

#Maintainer: blacksky3 <blacksky3@tuta.io> <https://github.com/blacksky3>
#Credits: Levente Polyak <anthraxx[at]archlinux[dot]org>
#Credits: Dan McGee <dan@archlinux.org>
#Credits: Allan McRae <allan@archlinux.org>

pkgname=valgrind-git
pkgver=3.18.1.r6.geaf052570
pkgrel=1
pkgdesc='Tool to help find memory-management problems in programs (git version)'
arch=('x86_64')
license=('GPL')
url='http://valgrind.org/'
depends=(glibc perl)
makedepends=(gdb lib32-glibc lib32-gcc-libs docbook-xml docbook-xsl docbook-sgml)
checkdepends=(procps-ng)
optdepends=(lib32-glibc: 32-bit ABI support)
replaces=(valgrind-multilib)
conflicts=(valgrind)
provides=(valgrind-multilib valgrind)
options=(!emptydirs !strip !buildflags)
source=('git://sourceware.org/git/valgrind.git'
        'valgrind-3.7.0-respect-flags.patch'
        'valgrind-3.18.1-glibc-2.35.patch')
md5sums=('SKIP'
         'SKIP'
         '60d1a99a2e1a404e61aee985e783fc80') #valgrind-3.18.1-glibc-2.35.patch

pkgver(){
  cd valgrind

  # cutting off 'foo-' prefix that presents in the git tag
  #git describe --long | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/_/./' | sed 's/_/./'
  git describe --long --tags | sed 's/^VALGRIND_//;s/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/_/./g'

  #git describe --long | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/_/./' | sed 's/_/./'
  #git describe --long --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/_/./' | sed 's/_/./'
}

prepare() {
  cd ${srcdir}/valgrind
  patch -Np1 < ../valgrind-3.7.0-respect-flags.patch
  sed -i 's|sgml/docbook/xsl-stylesheets|xml/docbook/xsl-stylesheets-1.79.2-nons|' docs/Makefile.am
  
  # https://sourceware.org/git/?p=valgrind.git;a=commitdiff;h=1024237358
  patch -p1 -i "${srcdir}"/valgrind-3.18.1-glibc-2.35.patch

  autoreconf -ifv
}

build() {
  # valgrind does not like some of our flags
  CPPFLAGS=${CPPFLAGS/-D_FORTIFY_SOURCE=2/}
  CFLAGS=${CFLAGS/-fno-plt/}
  CXXFLAGS=${CXXFLAGS/-fno-plt/}

  cd ${srcdir}/valgrind
  ./configure --prefix=/usr \
  --sysconfdir=/etc \ 
  --localstatedir=/var \
  --libexecdir=/usr/lib \
  --mandir=/usr/share/man
  make -j$(nproc)
  make -j$(nproc) -C docs man-pages
}

check() {
  cd ${srcdir}/valgrind

  # Make sure a basic binary runs. There should be no errors.
  ./vg-in-place --error-exitcode=1 /bin/true

  # Make sure no extra FLAGS leak through, the testsuite
  # sets all flags necessary. See also configure above.
  make -j$(nproc) check CPPFLAGS= CFLAGS= CXXFLAGS= LDFLAGS=

  # XXX: run full regtest but only report issues some tests fail duo
  # current toolchain and expectations, take a manual look if its fine
  #echo "===============TESTING==================="
  #make regtest || true

  # Make sure test failures show up in build.log
  # Gather up the diffs (at most the first 20 lines for each one)
  #local f max_lines=20 diff_files=()
  #mapfile -d '' diff_files < <(find . -name '*.diff' -print0 | sort -z)
  #if (( ${#diff_files[@]} == 0 )); then
    #echo "Congratulations, all tests passed!"
  #else
    #warning "Some tests failed!"
    #for f in "${diff_files[@]}"; do
        #echo "================================================="
        #echo "${f}"
        #echo "================================================="
        #if (( $(wc -l < "${f}") < ${max_lines} )); then
          #cat "${f}"
        #else
          #head -n ${max_lines} "${f}"
          #echo "<truncated beyond ${max_lines} lines>"
        #fi
    #done | tee diffs
  #fi
  #echo "===============END TESTING==============="
}

package() {
  cd ${srcdir}/valgrind
  make -j$(nproc) DESTDIR="${pkgdir}" install

  install -Dm644 docs/*.1 -t "$pkgdir/usr/share/man/man1"

  if check_option 'debug' n; then
    find "${pkgdir}/usr/bin" -type f -executable -exec strip $STRIP_BINARIES {} + || :
  fi
}
